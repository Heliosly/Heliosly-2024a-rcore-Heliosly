{"$message_type":"diagnostic","message":"unresolved import `spin::Mutex`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/task2/exu.rs","byte_start":268,"byte_end":292,"line_start":12,"line_end":12,"column_start":5,"column_end":29,"is_primary":true,"text":[{"text":"use spin::Mutex as SpinMutex;","highlight_start":5,"highlight_end":29}],"label":"no `Mutex` in `spin`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these items instead","code":null,"level":"help","spans":[{"file_name":"src/task2/exu.rs","byte_start":268,"byte_end":292,"line_start":12,"line_end":12,"column_start":5,"column_end":29,"is_primary":true,"text":[{"text":"use spin::Mutex as SpinMutex;","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":"async_lock::Mutex as SpinMutex","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/task2/exu.rs","byte_start":268,"byte_end":292,"line_start":12,"line_end":12,"column_start":5,"column_end":29,"is_primary":true,"text":[{"text":"use spin::Mutex as SpinMutex;","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":"crate::sync::Mutex as SpinMutex","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/task2/exu.rs","byte_start":268,"byte_end":292,"line_start":12,"line_end":12,"column_start":5,"column_end":29,"is_primary":true,"text":[{"text":"use spin::Mutex as SpinMutex;","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":"riscv::interrupt::Mutex as SpinMutex","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `spin::Mutex`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/task2/exu.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse spin::Mutex as SpinMutex;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `Mutex` in `spin`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse \u001b[0m\u001b[0m\u001b[38;5;10masync_lock::Mutex as SpinMutex\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse \u001b[0m\u001b[0m\u001b[38;5;10mcrate::sync::Mutex as SpinMutex\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse \u001b[0m\u001b[0m\u001b[38;5;10mriscv::interrupt::Mutex as SpinMutex\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `super::ProcessControlBlock`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/task2/id.rs","byte_start":96,"byte_end":122,"line_start":5,"line_end":5,"column_start":5,"column_end":31,"is_primary":true,"text":[{"text":"use super::ProcessControlBlock;","highlight_start":5,"highlight_end":31}],"label":"no `ProcessControlBlock` in `task2`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `super::ProcessControlBlock`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/task2/id.rs:5:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse super::ProcessControlBlock;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `ProcessControlBlock` in `task2`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/task2/exu.rs","byte_start":902,"byte_end":917,"line_start":42,"line_end":42,"column_start":30,"column_end":45,"is_primary":true,"text":[{"text":"            queue:Mutex::new(VecDeque::new()),","highlight_start":30,"highlight_end":45}],"label":"expected `Option<VecDeque<Runnable>>`, found `VecDeque<_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/task2/exu.rs","byte_start":891,"byte_end":901,"line_start":42,"line_end":42,"column_start":19,"column_end":29,"is_primary":false,"text":[{"text":"            queue:Mutex::new(VecDeque::new()),","highlight_start":19,"highlight_end":29}],"label":"arguments to this function are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected enum `core::option::Option<alloc::collections::VecDeque<async_task::Runnable>>`\n found struct `alloc::collections::VecDeque<_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"associated function defined here","code":null,"level":"note","spans":[{"file_name":"/home/ustc/.cargo/registry/src/index.crates.io-6f17d22bba15001f/async-lock-3.4.0/src/mutex.rs","byte_start":1920,"byte_end":1923,"line_start":72,"line_end":72,"column_start":22,"column_end":25,"is_primary":true,"text":[{"text":"        pub const fn new(data: T) -> Mutex<T> {","highlight_start":22,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"try wrapping the expression in `core::prelude::v1::Some`","code":null,"level":"help","spans":[{"file_name":"src/task2/exu.rs","byte_start":902,"byte_end":902,"line_start":42,"line_end":42,"column_start":30,"column_end":30,"is_primary":true,"text":[{"text":"            queue:Mutex::new(VecDeque::new()),","highlight_start":30,"highlight_end":30}],"label":null,"suggested_replacement":"core::prelude::v1::Some(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/task2/exu.rs","byte_start":917,"byte_end":917,"line_start":42,"line_end":42,"column_start":45,"column_end":45,"is_primary":true,"text":[{"text":"            queue:Mutex::new(VecDeque::new()),","highlight_start":45,"highlight_end":45}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/task2/exu.rs:42:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            queue:Mutex::new(VecDeque::new()),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `Option<VecDeque<Runnable>>`, found `VecDeque<_>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this function are incorrect\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected enum `\u001b[0m\u001b[0m\u001b[1m\u001b[35mcore::option::Option<\u001b[0m\u001b[0malloc::collections::VecDeque<\u001b[0m\u001b[0m\u001b[1m\u001b[35masync_task::Runnable\u001b[0m\u001b[0m>\u001b[0m\u001b[0m\u001b[1m\u001b[35m>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m            found struct `alloc::collections::VecDeque<\u001b[0m\u001b[0m\u001b[1m\u001b[35m_\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: associated function defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/ustc/.cargo/registry/src/index.crates.io-6f17d22bba15001f/async-lock-3.4.0/src/mutex.rs:72:22\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub const fn new(data: T) -> Mutex<T> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try wrapping the expression in `core::prelude::v1::Some`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            queue:Mutex::new(\u001b[0m\u001b[0m\u001b[38;5;10mcore::prelude::v1::Some(\u001b[0m\u001b[0mVecDeque::new()\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++++++++++\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `as_mut` found for struct `async_lock::futures::Lock` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/task2/exu.rs","byte_start":1478,"byte_end":1484,"line_start":68,"line_end":68,"column_start":14,"column_end":20,"is_primary":true,"text":[{"text":"        lock.as_mut().unwrap().push_back(runnable);","highlight_start":14,"highlight_end":20}],"label":"method not found in `Lock<'_, Option<VecDeque<Runnable>>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ustc/.rustup/toolchains/nightly-2024-05-02-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs","byte_start":13836,"byte_end":13842,"line_start":372,"line_end":372,"column_start":8,"column_end":14,"is_primary":false,"text":[{"text":"    fn as_mut(&mut self) -> &mut T;","highlight_start":8,"highlight_end":14}],"label":"the method is available for `alloc::boxed::Box<async_lock::futures::Lock<'_, core::option::Option<alloc::collections::VecDeque<async_task::Runnable>>>>` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ustc/.rustup/toolchains/nightly-2024-05-02-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs","byte_start":13836,"byte_end":13842,"line_start":372,"line_end":372,"column_start":8,"column_end":14,"is_primary":false,"text":[{"text":"    fn as_mut(&mut self) -> &mut T;","highlight_start":8,"highlight_end":14}],"label":"the method is available for `alloc::boxed::Box<&mut async_lock::futures::Lock<'_, core::option::Option<alloc::collections::VecDeque<async_task::Runnable>>>>` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ustc/.rustup/toolchains/nightly-2024-05-02-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs","byte_start":13836,"byte_end":13842,"line_start":372,"line_end":372,"column_start":8,"column_end":14,"is_primary":false,"text":[{"text":"    fn as_mut(&mut self) -> &mut T;","highlight_start":8,"highlight_end":14}],"label":"the method is available for `alloc::boxed::Box<&async_lock::futures::Lock<'_, core::option::Option<alloc::collections::VecDeque<async_task::Runnable>>>>` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider wrapping the receiver expression with the appropriate type","code":null,"level":"help","spans":[{"file_name":"src/task2/exu.rs","byte_start":1473,"byte_end":1473,"line_start":68,"line_end":68,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        lock.as_mut().unwrap().push_back(runnable);","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"Box::new(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/task2/exu.rs","byte_start":1477,"byte_end":1477,"line_start":68,"line_end":68,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        lock.as_mut().unwrap().push_back(runnable);","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"consider wrapping the receiver expression with the appropriate type","code":null,"level":"help","spans":[{"file_name":"src/task2/exu.rs","byte_start":1473,"byte_end":1473,"line_start":68,"line_end":68,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        lock.as_mut().unwrap().push_back(runnable);","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"Box::new(&mut ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/task2/exu.rs","byte_start":1477,"byte_end":1477,"line_start":68,"line_end":68,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        lock.as_mut().unwrap().push_back(runnable);","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"consider wrapping the receiver expression with the appropriate type","code":null,"level":"help","spans":[{"file_name":"src/task2/exu.rs","byte_start":1473,"byte_end":1473,"line_start":68,"line_end":68,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        lock.as_mut().unwrap().push_back(runnable);","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"Box::new(&","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/task2/exu.rs","byte_start":1477,"byte_end":1477,"line_start":68,"line_end":68,"column_start":13,"column_end":13,"is_primary":true,"text":[{"text":"        lock.as_mut().unwrap().push_back(runnable);","highlight_start":13,"highlight_end":13}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `as_mut` found for struct `async_lock::futures::Lock` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/task2/exu.rs:68:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        lock.as_mut().unwrap().push_back(runnable);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `Lock<'_, Option<VecDeque<Runnable>>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/ustc/.rustup/toolchains/nightly-2024-05-02-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:372:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m372\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn as_mut(&mut self) -> &mut T;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe method is available for `alloc::boxed::Box<async_lock::futures::Lock<'_, core::option::Option<alloc::collections::VecDeque<async_task::Runnable>>>>` here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe method is available for `alloc::boxed::Box<&mut async_lock::futures::Lock<'_, core::option::Option<alloc::collections::VecDeque<async_task::Runnable>>>>` here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe method is available for `alloc::boxed::Box<&async_lock::futures::Lock<'_, core::option::Option<alloc::collections::VecDeque<async_task::Runnable>>>>` here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider wrapping the receiver expression with the appropriate type\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10mBox::new(\u001b[0m\u001b[0mlock\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m.as_mut().unwrap().push_back(runnable);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider wrapping the receiver expression with the appropriate type\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10mBox::new(&mut \u001b[0m\u001b[0mlock\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m.as_mut().unwrap().push_back(runnable);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider wrapping the receiver expression with the appropriate type\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10mBox::new(&\u001b[0m\u001b[0mlock\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m.as_mut().unwrap().push_back(runnable);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `as_mut` found for struct `async_lock::futures::Lock` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/task2/exu.rs","byte_start":1699,"byte_end":1705,"line_start":73,"line_end":73,"column_start":27,"column_end":33,"is_primary":true,"text":[{"text":"        self.queue.lock().as_mut().unwrap().pop_front()","highlight_start":27,"highlight_end":33}],"label":"method not found in `Lock<'_, Option<VecDeque<Runnable>>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ustc/.rustup/toolchains/nightly-2024-05-02-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs","byte_start":13836,"byte_end":13842,"line_start":372,"line_end":372,"column_start":8,"column_end":14,"is_primary":false,"text":[{"text":"    fn as_mut(&mut self) -> &mut T;","highlight_start":8,"highlight_end":14}],"label":"the method is available for `alloc::boxed::Box<async_lock::futures::Lock<'_, core::option::Option<alloc::collections::VecDeque<async_task::Runnable>>>>` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ustc/.rustup/toolchains/nightly-2024-05-02-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs","byte_start":13836,"byte_end":13842,"line_start":372,"line_end":372,"column_start":8,"column_end":14,"is_primary":false,"text":[{"text":"    fn as_mut(&mut self) -> &mut T;","highlight_start":8,"highlight_end":14}],"label":"the method is available for `alloc::boxed::Box<&mut async_lock::futures::Lock<'_, core::option::Option<alloc::collections::VecDeque<async_task::Runnable>>>>` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ustc/.rustup/toolchains/nightly-2024-05-02-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs","byte_start":13836,"byte_end":13842,"line_start":372,"line_end":372,"column_start":8,"column_end":14,"is_primary":false,"text":[{"text":"    fn as_mut(&mut self) -> &mut T;","highlight_start":8,"highlight_end":14}],"label":"the method is available for `alloc::boxed::Box<&async_lock::futures::Lock<'_, core::option::Option<alloc::collections::VecDeque<async_task::Runnable>>>>` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider wrapping the receiver expression with the appropriate type","code":null,"level":"help","spans":[{"file_name":"src/task2/exu.rs","byte_start":1681,"byte_end":1681,"line_start":73,"line_end":73,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        self.queue.lock().as_mut().unwrap().pop_front()","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"Box::new(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/task2/exu.rs","byte_start":1698,"byte_end":1698,"line_start":73,"line_end":73,"column_start":26,"column_end":26,"is_primary":true,"text":[{"text":"        self.queue.lock().as_mut().unwrap().pop_front()","highlight_start":26,"highlight_end":26}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"consider wrapping the receiver expression with the appropriate type","code":null,"level":"help","spans":[{"file_name":"src/task2/exu.rs","byte_start":1681,"byte_end":1681,"line_start":73,"line_end":73,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        self.queue.lock().as_mut().unwrap().pop_front()","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"Box::new(&mut ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/task2/exu.rs","byte_start":1698,"byte_end":1698,"line_start":73,"line_end":73,"column_start":26,"column_end":26,"is_primary":true,"text":[{"text":"        self.queue.lock().as_mut().unwrap().pop_front()","highlight_start":26,"highlight_end":26}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"consider wrapping the receiver expression with the appropriate type","code":null,"level":"help","spans":[{"file_name":"src/task2/exu.rs","byte_start":1681,"byte_end":1681,"line_start":73,"line_end":73,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        self.queue.lock().as_mut().unwrap().pop_front()","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"Box::new(&","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/task2/exu.rs","byte_start":1698,"byte_end":1698,"line_start":73,"line_end":73,"column_start":26,"column_end":26,"is_primary":true,"text":[{"text":"        self.queue.lock().as_mut().unwrap().pop_front()","highlight_start":26,"highlight_end":26}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `as_mut` found for struct `async_lock::futures::Lock` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/task2/exu.rs:73:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        self.queue.lock().as_mut().unwrap().pop_front()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `Lock<'_, Option<VecDeque<Runnable>>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/ustc/.rustup/toolchains/nightly-2024-05-02-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:372:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m372\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn as_mut(&mut self) -> &mut T;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe method is available for `alloc::boxed::Box<async_lock::futures::Lock<'_, core::option::Option<alloc::collections::VecDeque<async_task::Runnable>>>>` here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe method is available for `alloc::boxed::Box<&mut async_lock::futures::Lock<'_, core::option::Option<alloc::collections::VecDeque<async_task::Runnable>>>>` here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe method is available for `alloc::boxed::Box<&async_lock::futures::Lock<'_, core::option::Option<alloc::collections::VecDeque<async_task::Runnable>>>>` here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider wrapping the receiver expression with the appropriate type\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10mBox::new(\u001b[0m\u001b[0mself.queue.lock()\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m.as_mut().unwrap().pop_front()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider wrapping the receiver expression with the appropriate type\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10mBox::new(&mut \u001b[0m\u001b[0mself.queue.lock()\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m.as_mut().unwrap().pop_front()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider wrapping the receiver expression with the appropriate type\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10mBox::new(&\u001b[0m\u001b[0mself.queue.lock()\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m.as_mut().unwrap().pop_front()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `as_mut` found for struct `async_lock::futures::Lock` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/task2/exu.rs","byte_start":1814,"byte_end":1820,"line_start":76,"line_end":76,"column_start":27,"column_end":33,"is_primary":true,"text":[{"text":"        self.queue.lock().as_mut().unwrap().push_front(runnable);","highlight_start":27,"highlight_end":33}],"label":"method not found in `Lock<'_, Option<VecDeque<Runnable>>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ustc/.rustup/toolchains/nightly-2024-05-02-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs","byte_start":13836,"byte_end":13842,"line_start":372,"line_end":372,"column_start":8,"column_end":14,"is_primary":false,"text":[{"text":"    fn as_mut(&mut self) -> &mut T;","highlight_start":8,"highlight_end":14}],"label":"the method is available for `alloc::boxed::Box<async_lock::futures::Lock<'_, core::option::Option<alloc::collections::VecDeque<async_task::Runnable>>>>` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ustc/.rustup/toolchains/nightly-2024-05-02-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs","byte_start":13836,"byte_end":13842,"line_start":372,"line_end":372,"column_start":8,"column_end":14,"is_primary":false,"text":[{"text":"    fn as_mut(&mut self) -> &mut T;","highlight_start":8,"highlight_end":14}],"label":"the method is available for `alloc::boxed::Box<&mut async_lock::futures::Lock<'_, core::option::Option<alloc::collections::VecDeque<async_task::Runnable>>>>` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ustc/.rustup/toolchains/nightly-2024-05-02-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs","byte_start":13836,"byte_end":13842,"line_start":372,"line_end":372,"column_start":8,"column_end":14,"is_primary":false,"text":[{"text":"    fn as_mut(&mut self) -> &mut T;","highlight_start":8,"highlight_end":14}],"label":"the method is available for `alloc::boxed::Box<&async_lock::futures::Lock<'_, core::option::Option<alloc::collections::VecDeque<async_task::Runnable>>>>` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider wrapping the receiver expression with the appropriate type","code":null,"level":"help","spans":[{"file_name":"src/task2/exu.rs","byte_start":1796,"byte_end":1796,"line_start":76,"line_end":76,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        self.queue.lock().as_mut().unwrap().push_front(runnable);","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"Box::new(","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/task2/exu.rs","byte_start":1813,"byte_end":1813,"line_start":76,"line_end":76,"column_start":26,"column_end":26,"is_primary":true,"text":[{"text":"        self.queue.lock().as_mut().unwrap().push_front(runnable);","highlight_start":26,"highlight_end":26}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"consider wrapping the receiver expression with the appropriate type","code":null,"level":"help","spans":[{"file_name":"src/task2/exu.rs","byte_start":1796,"byte_end":1796,"line_start":76,"line_end":76,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        self.queue.lock().as_mut().unwrap().push_front(runnable);","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"Box::new(&mut ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/task2/exu.rs","byte_start":1813,"byte_end":1813,"line_start":76,"line_end":76,"column_start":26,"column_end":26,"is_primary":true,"text":[{"text":"        self.queue.lock().as_mut().unwrap().push_front(runnable);","highlight_start":26,"highlight_end":26}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"consider wrapping the receiver expression with the appropriate type","code":null,"level":"help","spans":[{"file_name":"src/task2/exu.rs","byte_start":1796,"byte_end":1796,"line_start":76,"line_end":76,"column_start":9,"column_end":9,"is_primary":true,"text":[{"text":"        self.queue.lock().as_mut().unwrap().push_front(runnable);","highlight_start":9,"highlight_end":9}],"label":null,"suggested_replacement":"Box::new(&","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/task2/exu.rs","byte_start":1813,"byte_end":1813,"line_start":76,"line_end":76,"column_start":26,"column_end":26,"is_primary":true,"text":[{"text":"        self.queue.lock().as_mut().unwrap().push_front(runnable);","highlight_start":26,"highlight_end":26}],"label":null,"suggested_replacement":")","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `as_mut` found for struct `async_lock::futures::Lock` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/task2/exu.rs:76:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m76\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        self.queue.lock().as_mut().unwrap().push_front(runnable);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `Lock<'_, Option<VecDeque<Runnable>>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/ustc/.rustup/toolchains/nightly-2024-05-02-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs:372:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m372\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn as_mut(&mut self) -> &mut T;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe method is available for `alloc::boxed::Box<async_lock::futures::Lock<'_, core::option::Option<alloc::collections::VecDeque<async_task::Runnable>>>>` here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe method is available for `alloc::boxed::Box<&mut async_lock::futures::Lock<'_, core::option::Option<alloc::collections::VecDeque<async_task::Runnable>>>>` here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe method is available for `alloc::boxed::Box<&async_lock::futures::Lock<'_, core::option::Option<alloc::collections::VecDeque<async_task::Runnable>>>>` here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider wrapping the receiver expression with the appropriate type\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m76\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10mBox::new(\u001b[0m\u001b[0mself.queue.lock()\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m.as_mut().unwrap().push_front(runnable);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider wrapping the receiver expression with the appropriate type\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m76\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10mBox::new(&mut \u001b[0m\u001b[0mself.queue.lock()\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m.as_mut().unwrap().push_front(runnable);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider wrapping the receiver expression with the appropriate type\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m76\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10mBox::new(&\u001b[0m\u001b[0mself.queue.lock()\u001b[0m\u001b[0m\u001b[38;5;10m)\u001b[0m\u001b[0m.as_mut().unwrap().push_front(runnable);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 6 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 6 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0308, E0432, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0308, E0432, E0599.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0308`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0308`.\u001b[0m\n"}
